// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package testsuite.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the TestSuite module
	public static void aCT_CreateTestData(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("TestSuite.ACT_CreateTestData").withParams(params).execute(context);
	}
	public static void aCT_CreateTestData_Integer(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("TestSuite.ACT_CreateTestData_Integer").withParams(params).execute(context);
	}
	public static void aCT_CreateTestData_Long(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("TestSuite.ACT_CreateTestData_Long").withParams(params).execute(context);
	}
	public static void aCT_CreateTestDataNegative(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("TestSuite.ACT_CreateTestDataNegative").withParams(params).execute(context);
	}
	public static void aCT_CreateTestDataNegative_2(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("TestSuite.ACT_CreateTestDataNegative_2").withParams(params).execute(context);
	}
	public static void aCT_InvertYValues(IContext context, testsuite.proxies.Graph _graph)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Graph", _graph == null ? null : _graph.getMendixObject());
		Core.microflowCall("TestSuite.ACT_InvertYValues").withParams(params).execute(context);
	}
	public static boolean afterStartup(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("TestSuite.AfterStartup").withParams(params).execute(context);
	}
	public static java.util.List<testsuite.proxies.PointDecimal> dS_SeriesData(IContext context, testsuite.proxies.Graph _graph)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Graph", _graph == null ? null : _graph.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("TestSuite.DS_SeriesData").withParams(params).execute(context);
		java.util.List<testsuite.proxies.PointDecimal> result = null;
		if (objs != null)
		{
			result = new java.util.ArrayList<>();
			for (IMendixObject obj : objs)
				result.add(testsuite.proxies.PointDecimal.initialize(context, obj));
		}
		return result;
	}
	public static java.util.List<testsuite.proxies.PointDecimal> dS_SeriesData_withDelay(IContext context, testsuite.proxies.Graph _graph)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Graph", _graph == null ? null : _graph.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("TestSuite.DS_SeriesData_withDelay").withParams(params).execute(context);
		java.util.List<testsuite.proxies.PointDecimal> result = null;
		if (objs != null)
		{
			result = new java.util.ArrayList<>();
			for (IMendixObject obj : objs)
				result.add(testsuite.proxies.PointDecimal.initialize(context, obj));
		}
		return result;
	}
	public static testsuite.proxies.Graph dSS_ShowGraph(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("TestSuite.DSS_ShowGraph").withParams(params).execute(context);
		return result == null ? null : testsuite.proxies.Graph.initialize(context, result);
	}
	public static testsuite.proxies.Graph dSS_ShowGraph_Integer(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("TestSuite.DSS_ShowGraph_Integer").withParams(params).execute(context);
		return result == null ? null : testsuite.proxies.Graph.initialize(context, result);
	}
	public static testsuite.proxies.Graph dSS_ShowGraph_Negative(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("TestSuite.DSS_ShowGraph_Negative").withParams(params).execute(context);
		return result == null ? null : testsuite.proxies.Graph.initialize(context, result);
	}
	public static void oCH_CommitPoint(IContext context, testsuite.proxies.PointDecimal _point, testsuite.proxies.Graph _graph)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Point", _point == null ? null : _point.getMendixObject());
		params.put("Graph", _graph == null ? null : _graph.getMendixObject());
		Core.microflowCall("TestSuite.OCH_CommitPoint").withParams(params).execute(context);
	}
}